name: Release to maven central

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build and release
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Cache gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build
        run: ./gradlew build

      - name: Import gpg key and export to file
        run: |
          echo -e "${{ secrets.SIGNING_KEY }}" | gpg --batch --import
          echo '${{ secrets.SIGNING_KEY_PASSWORD }}' | gpg --export-secret-keys \
            --passphrase-fd 0 \
            --pinentry-mode loopback \
            ${{ secrets.SIGNING_KEY_ID }} \
            > secring.gpg

      - name: Publish to Sonatype
        env:
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        run: |
          ./gradlew -Psigning.secretKeyRingFile="secring.gpg" \
            -Psigning.password='${{ secrets.SIGNING_KEY_PASSWORD }}' \
            -Psigning.keyId="${{ secrets.SIGNING_KEY_ID }}" \
            publish

      - name: Delete gpg key file
        run: rm secring.gpg

      - name: Create Github release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;

            const { repo: { owner, repo } } = context;
            console.log({ owner, repo });

            for (let file of await fs.readdir('./build/libs')) {
              console.log('Uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: ${{ steps.create-release.outputs.id }},
                name: file,
                data: await fs.readFile(`./build/libs/${file}`)
              });
            }
